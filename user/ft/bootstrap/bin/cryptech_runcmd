#!/usr/bin/python
#
# Copyright (c) 2016, NORDUnet A/S All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# - Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# - Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# - Neither the name of the NORDUnet nor the names of its contributors may
#   be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""
Utility to upload new a firmware image or FPGA bitstream
"""
import os
import sys
import time
import struct
import serial
import argparse
import getpass

from binascii import crc32

FIRMWARE_CHUNK_SIZE = 4096
FPGA_CHUNK_SIZE = 4096

default_pins = {'wheel': 'YouReallyNeedToChangeThisPINRightNowWeAreNotKidding',
                'ct': 'ct',
                }
default_timeout = 2

def parse_args():
    """
    Parse the command line arguments
    """
    parser = argparse.ArgumentParser(description = "File uploader",
                                     add_help = True,
                                     formatter_class = argparse.ArgumentDefaultsHelpFormatter,
                                     )

    parser.add_argument('-d', '--device',
                        dest='device',
                        default='/dev/ttyUSB0',
                        help='Name of management port USB serial device',
                        )

    parser.add_argument("--username",
                        choices = ("so", "wheel", "ct"),
                        default = "so",
                        help = "Username to use when logging into the HSM",
                        )

    parser.add_argument("--timeout",
                        metavar = 'SECONDS',
                        type = int,
                        default = default_timeout,
                        help = "Timeout of commands (seconds)",
                        )

    parser.add_argument('commands', metavar='CMD', type=str, nargs='+',
                        help='commands to execute')
    return parser.parse_args()


def _write(dst, data, debug=False):
    dst.write(data)
    if not debug:
        return
    if len(data) == 4:
        print("Wrote 0x{!s}".format(data.encode('hex')))
    else:
        print("Wrote {!r}".format(data))


def _read(dst, retry=10, verbose=True, debug=False):
    res = ''
    x = dst.read(1)
    while not x and retry:
        x = dst.read(1)
        retry -= 1
    while x:
        res += x
        x = dst.read(1)
    if debug:
        print ("Read {!r}".format(res))
    if verbose:
        sys.stdout.write(res)
    return res

def _read_until_prompt(dst, retry):
    _write(dst, '\r')
    while retry:
        prompt = _read(dst, retry = 1)
        retry -= 1
        if prompt.endswith('Username: ') or \
                prompt.endswith('Password: ') or \
                prompt.endswith('> '):
            return prompt
    return ''

def _execute(dst, cmd, args):
    global default_pins

    prompt = _read_until_prompt(dst, retry = args.timeout)

    if prompt.endswith('Username: '):
        _write(dst, args.username + "\r", debug = True)
        prompt = _read(dst, retry = args.timeout)
        if prompt.endswith('Password: '):
            pin = default_pins.get(args.username)
            if not pin:
                pin = getpass.getpass("{} PIN: ".format(args.username))
            _write(dst, pin + '\r')
            prompt = _read(dst, retry = args.timeout)
    if not prompt.endswith('> '):
        #sys.stderr.write('Device does not seem to be ready for a file transfer (got {!r})\n'.format(prompt))
        return prompt

    _write(dst, cmd)

    response = _read_until_prompt(dst, retry = args.timeout)
    return response


def main(args):
    global pin
    dst = serial.Serial(args.device, 921600, timeout=1)
    for this in args.commands:
        _execute(dst, this, args)
    dst.close()
    return True

if __name__ == '__main__':
    try:
        args = parse_args()
        if main(args):
            sys.exit(0)
        sys.exit(1)
    except KeyboardInterrupt:
        pass

